plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.ciesielski'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

static def getRandomNumber(int num){
	Random random = new Random()
	return random.nextInt(num)
}

task generatePostsAndComments() {
	doLast {
		def names = ["Aubrey", "Bernard", "Celina", "Dominik", "Ewa", "Frank", "Greg", "Hanna", "Ian", "Jake"]
		def surnames = ["Stokes", "Monroe", "Carr", "Baird", "Douglas", "Sellers", "Compton", "Rocha", "Hall", "Serton"]

		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")

		// SCHOOLS
		for (int i = 1; i <= 3; i++) {
			dataSql.append("insert into SCHOOL_ENTITY(id, name, hour_price) " +
					"values (${i}, 'Public School Number: ${i}', " + i*10 + ");\n")
		}

		// PARENTS
		for (int i = 1; i <= 10; i++) {
			dataSql.append("insert into PARENT_ENTITY(id, first_name, last_name) " +
					"values (${i}, '${names[i-1]}', '${surnames[i-1]}');\n")
		}

		// CHILDREN
		for (int i = 1; i <= 10; i++) {
			dataSql.append("insert into CHILD_ENTITY(id, first_name, last_name, parent_id, school_id) " +
					"values (${i}, '${names[getRandomNumber(10)]}_junior', '${surnames[i%7]}', ${i%7+1}, ${i%3+1});\n")
		}

		// ATTENDANCE
		for (int i = 1; i <= 15; i++) {
			dataSql.append("insert into ATTENDANCE_ENTITY(id, entry_date, exit_date, child_id) " +
					"values (${i}, '" + LocalDateTime.now().withHour(i) + "', '" + LocalDateTime.now().withHour(i+3) + "', ${i%9+1});\n"
			)
		}
	}
}
